class TrieNode{
    boolean eow;
    TrieNode child[];
    public TrieNode(){
        eow=false;
        child=new TrieNode[26];
    }
}

class Trie {
    TrieNode root;
    public Trie() {
        root=new TrieNode();
    }
    
    public void insert(String word) {
        if(word == null || word.isEmpty())return;
        TrieNode temp=root;
        for(int i=0;i<word.length();i++){
            int idx=word.charAt(i)-'a';
            if(temp.child[idx] == null){
                temp.child[idx]=new TrieNode();
            }
            temp=temp.child[idx];
        }
        temp.eow=true;
        
    }
    
    public boolean search(String word) {
        if(word == null || word.isEmpty())
            return false;
        TrieNode temp=root;
        for (int i=0;i<word.length();i++){
            int idx=word.charAt(i)-'a';
            if(temp.child[idx] == null){
                return false;
            }
            temp=temp.child[idx];
        }
        return temp.eow;
    }
    
    public boolean startsWith(String prefix) {
        if(prefix == null || prefix.isEmpty())
            return false;
        TrieNode temp=root;
        for (int i=0;i<prefix.length();i++){
            int idx=prefix.charAt(i)-'a';
            if(temp.child[idx] == null){
                return false;
            }
            temp=temp.child[idx];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
